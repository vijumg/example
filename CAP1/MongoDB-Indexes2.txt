
Performance - Indexing

db.Names.insert({"Name":"Ajay"})
db.Names.insert({"Name":"Manoj"})
db.Names.insert({"Name":"Preeti"})
db.Names.insert({"Name":"Anuj"})
db.Names.insert({"Name":"Tony"})
db.Names.insert({"Name":"Steve"})
db.Names.insert({"Name":"Smith"})
db.Names.insert({"Name":"David"})
db.Names.insert({"Name":"William"})

db.Names.find({"Name":"Smith"})

db.Names.find({"Name":"Smith"}).explain()
Here some points to notice
cursor : BasicCursor :  It means MongoDB will perform a complete collection scan.
nscannedObjects : MongoDB scan 9 objects to match this query.

Create Index
db.Names.createIndex({"Name":1})

Different Types of Indexes in MongoDB
1. Single Field Index :
Apart from the default Index on _id field created by MongoDB users can create ascending or descending index on a single field.
db.Names.createIndex({"Name":1})
db.Names.find({"Name":"Smith"}).explain()

Now we have an index (BtreeCursor Name_1) defined instead of Basic Cursor and Most Importantly look the nscannedObjects which is 1 now it means MongoDB scanned only 1 document which we mentioned in the query. 


db.Users.insert({"Name":"Ajay","Age":30})
db.Users.insert({"Name":"Manoj","Age":60})
db.Users.insert({"Name":"Preeti","Age":20})
db.Users.insert({"Name":"Anuj","Age":70})
db.Users.insert({"Name":"Tony","Age":25})
db.Users.insert({"Name":"Steve","Age":18})
db.Users.insert({"Name":"Smith","Age":33})
db.Users.insert({"Name":"David","Age":53})
db.Users.insert({"Name":"William","Age":65})

suppose we want to find out all the documents where Age is greater than 30 and less than 60. 
db.Users.find( { "Age" : {$gte : 30, $lte : 60 } }).explain()

BasicCursor so it will be a complete table scan and total documents scanned by the query is 9
db.Users.createIndex({"Age":1})
db.Users.find( { "Age" : {$gte : 30, $lte : 60 } }).explain()

After Index, MongoDB will not do a complete table scan, it will only 4 rows

2. Compound Index :
db.Users.createIndex({"Name":1,"Age":-1})

Note : Compound Index will work only if we will search on Name or Name and Age. If we will search through Age only than Compound Index will not work.

db.Users.find({"Name":"Smith"}).explain()
db.Users.find( {$and : [ { "Name":"Smith" }, {Age : 33} ] } ).explain()

But if search only on Age then we can see that Compound Index is not in use
db.Users.find( {Age : 33} ).explain()

3. Multikey Index :
db.Users.remove({})
db.Users.insert({"Name":"Ajay","Age":30,Interest : ["cricket","music"] })
db.Users.insert({"Name":"Manoj","Age":60,Interest : ["cricket","driving"]})
db.Users.insert({"Name":"Preeti","Age":20,Interest : ["music","driving"]})
db.Users.insert({"Name":"Anuj","Age":70,Interest : ["cooking","music"]})
db.Users.insert({"Name":"Tony","Age":25,Interest : ["swimming","cooking"]})
db.Users.insert({"Name":"Steve","Age":18,Interest : ["dancing","music"]})
db.Users.insert({"Name":"Smith","Age":33,Interest : ["tennis","tv"]})
db.Users.insert({"Name":"David","Age":53,Interest : ["music","swimming"]})
db.Users.insert({"Name":"William","Age":65,Interest : ["dancing","swimming"]})

Now if we want to Index the content of an array (Interest in my case) then we will use the Multikey Index.

db.Users.createIndex({Interest : 1})

4. Text Index :
we are performing a text search then for better performance we can apply the Text Index on string content.
we want to create an Index on Name field then we will create a text index as below
db.Users.createIndex({Name : "text"})

Note : A collection can have at most one text index.

Apart from these Indexes MongoDB supports some more indexes which includes Geospatial and Hashed Index.

Geospatial  Index is for better queries on geospatial coordinate data and Hashed Index Indexes the hash of the value of a field

MongoDB Index Properties
1. Unique 

unique property on a index field allows MongoDB to not accept a duplicate value for index field.In other words unique property will restrict t insert duplicate value for Index field.

db.Users.drop()
db.Users.createIndex({SSN:1},{unique:true})
db.Users.insert({"Name":"Ajay","Age":30,Interest : ["cricket","music"] ,"SSN" : "12345"})
db.Users.insert({"Name":"Manoj","Age":60,Interest : ["cricket","driving"],"SSN" : "54321"})

db.Users.insert({"Name":"Preeti","Age":20,Interest : ["music","driving"],"SSN" : "54321"})

2. Sparse		(Not dense)
Sparse will tell the database that those documents should not be included in index where SSN is missing. 

db.Users.drop()
db.Users.insert({"Name":"Ajay","Age":30,Interest : ["cricket","music"] ,"SSN" : "12345"})
db.Users.insert({"Name":"Manoj","Age":60,Interest : ["cricket","driving"],"SSN" : "54321"})
db.Users.insert({"Name":"Preeti","Age":20,Interest : ["music","driving"]})
db.Users.insert({"Name":"Anuj","Age":70,Interest : ["cooking","music"]})

db.Users.createIndex({SSN:1},{unique:true})	error
i will get an error because SSN contains null for last two documents and so SSN is not unique.

create a index with sparse with unique property.
db.Users.createIndex({SSN:1},{unique:true,sparse:true})


3. Partial Index
Sometimes we want to create index with some specific condition. If we are creating index with some condition than it is a partial Index.

create an Index on Name field only when Age is greater than 30
db.Users.createIndex(
   { Name: 1},
   { partialFilterExpression: { Age: { $gt: 30 } } }
)

4. TTL Index

MongoDB has a special type of single Field Index named TTL Index.MongoDB uses this type of Index to remove document automatically after a certain period of Time. We use expireAfterSeconds option to provide the expiration Time.

creating a TTL Index on Age with 60 second expiring time as below
db.Users.createIndex( { "Age": 1 }, { expireAfterSeconds: 60 } ) 

It will delete this document after 60 seconds automatically. A background task runs in every 60 seconds that removes all the expire documents.so it might take some extra time to remove this document from collection. It depends also on workload of mongod instance so expired documents can be in collection beyond the specified amount of time.


Some Key Points
1. getIndexes() 
If we want to see all the created indexes on a collection we use getIndexes() method.
Syntax : db.CollectionName.getIndexes()

2. dropIndex() 
To drop a Index we use dropIndex() method.
Syntax : db.CollectionName.dropIndex({"Key":1 or -1})
Pass the key with 1 or -1 which we passed while creating index.

3. dropIndexes() 
To remove all the Indexes from a collection we use dropIndexes() method.
db.CollectionName.dropIndexes() 

4. To Get all Indexes from a collection
db.getCollectionNames().forEach(function(collection) {
   index = db[collection].getIndexes();
   print("Indexes for " + collection + ":");
   printjson(index);
});

5. Rebuild a Index
To Rebuild a Index we use reIndex() method as below
db.CollectioName.reIndex()

Limitations

1. A single collection can not have more than 64 indexes.
2. In Compound Index can not have more than 31 Fields.
