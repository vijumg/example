use SampleAggregationDB
db.createCollection("AggregationExampleCollection")
db.AggregationCollection.insertMany( [
{  _id: '012345678912', title: 'DragonStone', description: 'GOT Season 7 Episode 1', directed_by: 'Matt Shakman', tags: ['drogon', 'danerys'], likes: 100 },
{  _id: '012345678913', title: 'Stormborn', description: 'GOT Season 7 Episode 2', directed_by: 'Matt Shakman', tags: ['jon', 'sansa'], likes: 10 },
{  _id: '012345678914', title: 'The Queens Justice', description: 'GOT Season 7 Episode 3', directed_by: 'Matt Shakman', tags: ['cersei', 'danerys'], likes: 750 },
{  _id: '012345678915', title: 'The Spoils of War', description: 'GOT Season 7 Episode 4', directed_by: 'Matt Shakman', tags: ['jaime', 'cersei'], likes: 10000 },
{  _id: '012345678916', title: 'EastWatch', description: 'GOT Season 7 Episode 5', directed_by: 'Matt Shakman', tags: ['jon', 'danerys'], likes: 1250 }
] )

 simple example of applying data aggregation via the aggregation pipelines:
db.AggregationCollection.aggregate([
       {$match : { directed_by : "Matt Shakman"} },
       {$group : {_id : "$title", noOfEpisodes : {$sum : 1}}}
   ])

db.AggregationCollection.count()

db.AggregationCollection.distinct("directed_by")

db.getCollectionNames()
